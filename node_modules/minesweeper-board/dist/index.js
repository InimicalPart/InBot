(function(factory){if(typeof module==="object"&&typeof module.exports==="object"){var v=factory(require,exports);if(v!==undefined)module.exports=v}else if(typeof define==="function"&&define.amd){define(["require","exports"],factory)}})(function(require,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.Board=void 0;const random=max=>{return Math.floor(Math.random()*max)};const lowerAlpha=[..."abcdefghijklmnopqrstuvwxyz"];let upperAlpha=new Array;lowerAlpha.forEach(letter=>upperAlpha.push(letter.toUpperCase()));const allpha=`${upperAlpha.join()}${lowerAlpha.join()}`.split(",");class Cell{constructor(v){this.hasMine=false;return this}setMine(v){this.hasMine=v}setID(v){this.id=v}}class Board{constructor(dimension,mines){this.board=new Array;if(dimension>allpha.length)throw new Error("dimension can't be greater than "+String(allpha.length));for(let i=0;i<dimension;i++){let row=[];for(let j=0;j<dimension;j++){row.push(new Cell(false))}this.board.push(row)}this.board.forEach(row=>{const m=this.board.indexOf(row);row.forEach(cell=>{const n=row.indexOf(cell);return cell.setID(allpha[m]+String(n))})});this.plantMines(dimension,mines)}getBoard(){return this.board}plantMines(dimension,mines){let mineCount=0;while(mineCount<mines){let x=random(dimension),y=random(dimension);if(!this.board[x][y].hasMine){this.board[x][y].setMine(true);mineCount++}}}countMines(){let count=0;let i;let j;let row;let cell;for(i=0;i<this.board.length;i++){row=this.board[i];for(j=0;j<row.length;j++){cell=row[j];if(cell.hasMine){count++}}}return count}}exports.Board=Board});